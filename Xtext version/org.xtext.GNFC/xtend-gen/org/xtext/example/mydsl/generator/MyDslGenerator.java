/**
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.generator;

import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.example.mydsl.myDsl.Binary;
import org.xtext.example.mydsl.myDsl.GNFC;
import org.xtext.example.mydsl.myDsl.Production;
import org.xtext.example.mydsl.myDsl.Rigth;
import org.xtext.example.mydsl.myDsl.Simple;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final GNFC grammar = ((GNFC) _head);
    fsa.generateFile("GrammarResult.txt", this.printResult(grammar));
  }
  
  public String getString(final GNFC grammar) {
    String _xblockexpression = null;
    {
      String string = "";
      EList<Simple> _w = grammar.getW();
      for (final Simple terminal : _w) {
        {
          String _string = string;
          String _alpha = terminal.getAlpha();
          string = (_string + _alpha);
          String _string_1 = string;
          string = (_string_1 + "");
        }
      }
      _xblockexpression = string;
    }
    return _xblockexpression;
  }
  
  public ArrayList<String> Variables(final GNFC grammar) {
    ArrayList<String> _xblockexpression = null;
    {
      ArrayList<String> variables = CollectionLiterals.<String>newArrayList();
      variables.add(grammar.getInit().getLeft());
      EList<Production> _productions = grammar.getProductions();
      for (final Production production : _productions) {
        variables.add(production.getLeft().getVar());
      }
      _xblockexpression = variables;
    }
    return _xblockexpression;
  }
  
  public ArrayList<String> Productions(final GNFC grammar) {
    ArrayList<String> _xblockexpression = null;
    {
      ArrayList<String> productions = CollectionLiterals.<String>newArrayList();
      String string = "";
      int i = 1;
      EList<Rigth> _rigth = grammar.getInit().getRigth();
      for (final Rigth rigth : _rigth) {
        {
          Simple _simple = rigth.getSimple();
          boolean _tripleNotEquals = (_simple != null);
          if (_tripleNotEquals) {
            String _string = string;
            String _alpha = rigth.getSimple().getAlpha();
            string = (_string + _alpha);
            int _size = grammar.getInit().getRigth().size();
            boolean _notEquals = (i != _size);
            if (_notEquals) {
              String _string_1 = string;
              string = (_string_1 + "|");
            }
          } else {
            Binary _binary = rigth.getBinary();
            boolean _tripleNotEquals_1 = (_binary != null);
            if (_tripleNotEquals_1) {
              String _string_2 = string;
              String _var = rigth.getBinary().getFirst().getVar();
              string = (_string_2 + _var);
              String _string_3 = string;
              String _var_1 = rigth.getBinary().getSecond().getVar();
              string = (_string_3 + _var_1);
              int _size_1 = grammar.getInit().getRigth().size();
              boolean _notEquals_1 = (i != _size_1);
              if (_notEquals_1) {
                String _string_4 = string;
                string = (_string_4 + "|");
              }
            }
          }
          i++;
        }
      }
      productions.add(string);
      int j = 1;
      EList<Production> _productions = grammar.getProductions();
      for (final Production production : _productions) {
        {
          String string2 = "";
          EList<Rigth> _rigth_1 = production.getRigth();
          for (final Rigth rigth_1 : _rigth_1) {
            {
              Simple _simple = rigth_1.getSimple();
              boolean _tripleNotEquals = (_simple != null);
              if (_tripleNotEquals) {
                String _string2 = string2;
                String _alpha = rigth_1.getSimple().getAlpha();
                string2 = (_string2 + _alpha);
                int _size = production.getRigth().size();
                boolean _notEquals = (j != _size);
                if (_notEquals) {
                  String _string2_1 = string2;
                  string2 = (_string2_1 + "|");
                }
              } else {
                Binary _binary = rigth_1.getBinary();
                boolean _tripleNotEquals_1 = (_binary != null);
                if (_tripleNotEquals_1) {
                  String _string2_2 = string2;
                  String _var = rigth_1.getBinary().getFirst().getVar();
                  string2 = (_string2_2 + _var);
                  String _string2_3 = string2;
                  String _var_1 = rigth_1.getBinary().getSecond().getVar();
                  string2 = (_string2_3 + _var_1);
                  int _size_1 = production.getRigth().size();
                  boolean _notEquals_1 = (j != _size_1);
                  if (_notEquals_1) {
                    String _string2_4 = string2;
                    string2 = (_string2_4 + "|");
                  }
                }
              }
              j++;
            }
          }
          j = 1;
          productions.add(string2);
        }
      }
      _xblockexpression = productions;
    }
    return _xblockexpression;
  }
  
  public String message(final CYK cyk) {
    String _xblockexpression = null;
    {
      String message = "";
      boolean _containsString = cyk.containsString();
      if (_containsString) {
        String _message = message;
        message = (_message + "\n");
        String _message_1 = message;
        message = (_message_1 + "La cadena ingresada es generada");
        String _message_2 = message;
        message = (_message_2 + "\n\n");
      } else {
        String _message_3 = message;
        message = (_message_3 + "\n");
        String _message_4 = message;
        message = (_message_4 + "La cadena ingresada no es generada");
        String _message_5 = message;
        message = (_message_5 + "\n\n");
      }
      _xblockexpression = message;
    }
    return _xblockexpression;
  }
  
  public String jIndexes(final int columns, final int maxWidth, final int toFit) {
    String _xblockexpression = null;
    {
      String jIndexes = "";
      IntegerRange _upTo = new IntegerRange(0, toFit);
      for (final Integer space : _upTo) {
        String _jIndexes = jIndexes;
        jIndexes = (_jIndexes + " ");
      }
      String _jIndexes_1 = jIndexes;
      jIndexes = (_jIndexes_1 + " ");
      int i = 2;
      IntegerRange _upTo_1 = new IntegerRange(0, (columns - 1));
      for (final Integer e : _upTo_1) {
        {
          String blankLeft = " ";
          String blankRight = "";
          i++;
          IntegerRange _upTo_2 = new IntegerRange(0, i);
          for (final Integer index : _upTo_2) {
            String _blankRight = blankRight;
            blankRight = (_blankRight + " ");
          }
          if (((e).intValue() == 0)) {
            String _jIndexes_2 = jIndexes;
            jIndexes = (_jIndexes_2 + (((blankLeft + "j=") + e) + blankRight));
          } else {
            String _jIndexes_3 = jIndexes;
            jIndexes = (_jIndexes_3 + (("j=" + e) + blankRight));
          }
          i = 2;
        }
      }
      String _jIndexes_2 = jIndexes;
      jIndexes = (_jIndexes_2 + "\n");
      _xblockexpression = jIndexes;
    }
    return _xblockexpression;
  }
  
  public String executeCYK(final GNFC grammar) {
    String _xblockexpression = null;
    {
      String[][] _convertToMatrix = new CYK().convertToMatrix(this.Variables(grammar), this.Productions(grammar));
      int _length = this.getString(grammar).length();
      CYK cyk = new CYK(_convertToMatrix, _length);
      cyk.addValueToMap();
      cyk.addTofirstColumn(this.getString(grammar));
      cyk.calculateCYK(this.getString(grammar));
      ArrayList<Integer> list = CollectionLiterals.<Integer>newArrayList();
      int maxWidth = 0;
      String result = "";
      String aux = "";
      String _result = result;
      String _message = this.message(cyk);
      result = (_result + _message);
      int _length_1 = this.getString(grammar).length();
      int _minus = (_length_1 - 1);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for (final Integer row : _upTo) {
        int _length_2 = this.getString(grammar).length();
        int _minus_1 = (_length_2 - 1);
        IntegerRange _upTo_1 = new IntegerRange(0, _minus_1);
        for (final Integer column : _upTo_1) {
          String _get = (cyk.getMatrixResult()[(row).intValue()])[(column).intValue()];
          boolean _tripleNotEquals = (_get != null);
          if (_tripleNotEquals) {
            String _get_1 = (cyk.getMatrixResult()[(row).intValue()])[(column).intValue()];
            String _plus = ("{" + _get_1);
            String _plus_1 = (_plus + "}");
            aux = _plus_1;
            list.add(Integer.valueOf(aux.length()));
          }
        }
      }
      IterableExtensions.<Integer>sort(list);
      int _size = list.size();
      int _minus_2 = (_size - 1);
      maxWidth = (list.get(_minus_2)).intValue();
      ArrayList<Integer> toFit = CollectionLiterals.<Integer>newArrayList();
      int _length_3 = this.getString(grammar).length();
      IntegerRange _upTo_2 = new IntegerRange(0, _length_3);
      for (final Integer e : _upTo_2) {
        toFit.add(Integer.valueOf(("i=" + e).length()));
      }
      IterableExtensions.<Integer>sort(toFit);
      String _result_1 = result;
      int _size_1 = toFit.size();
      int _minus_3 = (_size_1 - 1);
      String _jIndexes = this.jIndexes(this.getString(grammar).length(), maxWidth, (toFit.get(_minus_3)).intValue());
      result = (_result_1 + _jIndexes);
      int _length_4 = this.getString(grammar).length();
      int _minus_4 = (_length_4 - 1);
      IntegerRange _upTo_3 = new IntegerRange(0, _minus_4);
      for (final Integer row_1 : _upTo_3) {
        {
          String _result_2 = result;
          result = (_result_2 + (("i=" + row_1) + " "));
          int _length_5 = this.getString(grammar).length();
          int _minus_5 = (_length_5 - 1);
          IntegerRange _upTo_4 = new IntegerRange(0, _minus_5);
          for (final Integer column_1 : _upTo_4) {
            String _get_2 = (cyk.getMatrixResult()[(row_1).intValue()])[(column_1).intValue()];
            boolean _tripleNotEquals_1 = (_get_2 != null);
            if (_tripleNotEquals_1) {
              String _get_3 = (cyk.getMatrixResult()[(row_1).intValue()])[(column_1).intValue()];
              String _plus_2 = ("{" + _get_3);
              int _length_6 = (_plus_2 + "}").length();
              int difference = (maxWidth - _length_6);
              String blankLeft = "";
              String blankRight = "";
              IntegerRange _upTo_5 = new IntegerRange(0, (difference / 2));
              for (final Integer i : _upTo_5) {
                {
                  String _blankLeft = blankLeft;
                  blankLeft = (_blankLeft + " ");
                  String _blankRight = blankRight;
                  blankRight = (_blankRight + " ");
                }
              }
              String aux2 = "";
              String _get_4 = (cyk.getMatrixResult()[(row_1).intValue()])[(column_1).intValue()];
              String _plus_3 = ("{" + _get_4);
              String _plus_4 = (_plus_3 + "}");
              aux2 = _plus_4;
              int _length_7 = aux2.length();
              boolean _greaterThan = (_length_7 > maxWidth);
              if (_greaterThan) {
                String _result_3 = result;
                String _get_5 = (cyk.getMatrixResult()[(row_1).intValue()])[(column_1).intValue()];
                String _plus_5 = ("{" + _get_5);
                String _plus_6 = (_plus_5 + "}");
                result = (_result_3 + _plus_6);
              } else {
                int _length_8 = aux2.length();
                boolean _equals = (_length_8 == 2);
                if (_equals) {
                  String _blankLeft = blankLeft;
                  blankLeft = (_blankLeft + "   ");
                  String _result_4 = result;
                  String _get_6 = (cyk.getMatrixResult()[(row_1).intValue()])[(column_1).intValue()];
                  String _plus_7 = (("{" + blankLeft) + _get_6);
                  String _plus_8 = (_plus_7 + "}");
                  result = (_result_4 + _plus_8);
                } else {
                  String _result_5 = result;
                  String _get_7 = (cyk.getMatrixResult()[(row_1).intValue()])[(column_1).intValue()];
                  String _plus_9 = (("{" + blankLeft) + _get_7);
                  String _plus_10 = (_plus_9 + blankRight);
                  String _plus_11 = (_plus_10 + "}");
                  result = (_result_5 + _plus_11);
                }
              }
            }
          }
          String _result_6 = result;
          result = (_result_6 + "\n");
        }
      }
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  public CharSequence printResult(final GNFC grammar) {
    StringConcatenation _builder = new StringConcatenation();
    String _executeCYK = this.executeCYK(grammar);
    _builder.append(_executeCYK);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
