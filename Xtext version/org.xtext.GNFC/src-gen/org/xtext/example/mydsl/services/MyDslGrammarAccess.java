/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GNFCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GNFC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWSimpleParserRuleCall_0_0 = (RuleCall)cWAssignment_0.eContents().get(0);
		private final Assignment cWAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWSimpleParserRuleCall_1_0 = (RuleCall)cWAssignment_1.eContents().get(0);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitInitialParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Assignment cProductionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProductionsProductionParserRuleCall_3_0 = (RuleCall)cProductionsAssignment_3.eContents().get(0);
		
		//GNFC:
		//    w+=(Simple)(w+=Simple)* //W is the string which will be analyzed by CYK
		//    init=Initial productions+=Production*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//w+=(Simple)(w+=Simple)* //W is the string which will be analyzed by CYK
		//init=Initial productions+=Production*
		public Group getGroup() { return cGroup; }
		
		//w+=(Simple)
		public Assignment getWAssignment_0() { return cWAssignment_0; }
		
		//(Simple)
		public RuleCall getWSimpleParserRuleCall_0_0() { return cWSimpleParserRuleCall_0_0; }
		
		//(w+=Simple)*
		public Assignment getWAssignment_1() { return cWAssignment_1; }
		
		//Simple
		public RuleCall getWSimpleParserRuleCall_1_0() { return cWSimpleParserRuleCall_1_0; }
		
		////W is the string which will be analyzed by CYK
		//   init=Initial
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }
		
		//Initial
		public RuleCall getInitInitialParserRuleCall_2_0() { return cInitInitialParserRuleCall_2_0; }
		
		//productions+=Production*
		public Assignment getProductionsAssignment_3() { return cProductionsAssignment_3; }
		
		//Production
		public RuleCall getProductionsProductionParserRuleCall_3_0() { return cProductionsProductionParserRuleCall_3_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLeftSKeyword_0_0 = (Keyword)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRigthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRigthRigthParserRuleCall_2_0 = (RuleCall)cRigthAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRigthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRigthRigthParserRuleCall_3_1_0 = (RuleCall)cRigthAssignment_3_1.eContents().get(0);
		
		//Initial:
		//    left='S' '->' rigth+=(Rigth)('|' + rigth+=Rigth)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left='S' '->' rigth+=(Rigth)('|' + rigth+=Rigth)*
		public Group getGroup() { return cGroup; }
		
		//left='S'
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//'S'
		public Keyword getLeftSKeyword_0_0() { return cLeftSKeyword_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//rigth+=(Rigth)
		public Assignment getRigthAssignment_2() { return cRigthAssignment_2; }
		
		//(Rigth)
		public RuleCall getRigthRigthParserRuleCall_2_0() { return cRigthRigthParserRuleCall_2_0; }
		
		//('|' + rigth+=Rigth)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|' +
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//rigth+=Rigth
		public Assignment getRigthAssignment_3_1() { return cRigthAssignment_3_1; }
		
		//Rigth
		public RuleCall getRigthRigthParserRuleCall_3_1_0() { return cRigthRigthParserRuleCall_3_1_0; }
	}
	public class ProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Production");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNonTerminalParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRigthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRigthRigthParserRuleCall_2_0 = (RuleCall)cRigthAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRigthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRigthRigthParserRuleCall_3_1_0 = (RuleCall)cRigthAssignment_3_1.eContents().get(0);
		
		////Lambda:
		////    {Rigth} rigth= '_' | Rigth
		////;
		//Production:
		//    left=NonTerminal '->' rigth+=(Rigth)('|' + rigth+=Rigth)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=NonTerminal '->' rigth+=(Rigth)('|' + rigth+=Rigth)*
		public Group getGroup() { return cGroup; }
		
		//left=NonTerminal
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//NonTerminal
		public RuleCall getLeftNonTerminalParserRuleCall_0_0() { return cLeftNonTerminalParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//rigth+=(Rigth)
		public Assignment getRigthAssignment_2() { return cRigthAssignment_2; }
		
		//(Rigth)
		public RuleCall getRigthRigthParserRuleCall_2_0() { return cRigthRigthParserRuleCall_2_0; }
		
		//('|' + rigth+=Rigth)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|' +
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//rigth+=Rigth
		public Assignment getRigthAssignment_3_1() { return cRigthAssignment_3_1; }
		
		//Rigth
		public RuleCall getRigthRigthParserRuleCall_3_1_0() { return cRigthRigthParserRuleCall_3_1_0; }
	}
	public class RigthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rigth");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleSimpleParserRuleCall_0_0 = (RuleCall)cSimpleAssignment_0.eContents().get(0);
		private final Assignment cBinaryAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryBinaryParserRuleCall_1_0 = (RuleCall)cBinaryAssignment_1.eContents().get(0);
		
		//Rigth:
		//    simple=Simple | binary=Binary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//simple=Simple | binary=Binary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simple=Simple
		public Assignment getSimpleAssignment_0() { return cSimpleAssignment_0; }
		
		//Simple
		public RuleCall getSimpleSimpleParserRuleCall_0_0() { return cSimpleSimpleParserRuleCall_0_0; }
		
		//binary=Binary
		public Assignment getBinaryAssignment_1() { return cBinaryAssignment_1; }
		
		//Binary
		public RuleCall getBinaryBinaryParserRuleCall_1_0() { return cBinaryBinaryParserRuleCall_1_0; }
	}
	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Simple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAlphaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAlphaAlternatives_1_0 = (Alternatives)cAlphaAssignment_1.eContents().get(0);
		private final Keyword cAlphaAKeyword_1_0_0 = (Keyword)cAlphaAlternatives_1_0.eContents().get(0);
		private final Keyword cAlphaBKeyword_1_0_1 = (Keyword)cAlphaAlternatives_1_0.eContents().get(1);
		private final Keyword cAlphaCKeyword_1_0_2 = (Keyword)cAlphaAlternatives_1_0.eContents().get(2);
		private final Keyword cAlphaDKeyword_1_0_3 = (Keyword)cAlphaAlternatives_1_0.eContents().get(3);
		private final Keyword cAlphaEKeyword_1_0_4 = (Keyword)cAlphaAlternatives_1_0.eContents().get(4);
		private final Keyword cAlphaFKeyword_1_0_5 = (Keyword)cAlphaAlternatives_1_0.eContents().get(5);
		private final Keyword cAlphaGKeyword_1_0_6 = (Keyword)cAlphaAlternatives_1_0.eContents().get(6);
		private final Keyword cAlphaHKeyword_1_0_7 = (Keyword)cAlphaAlternatives_1_0.eContents().get(7);
		private final Keyword cAlphaIKeyword_1_0_8 = (Keyword)cAlphaAlternatives_1_0.eContents().get(8);
		private final Keyword cAlphaJKeyword_1_0_9 = (Keyword)cAlphaAlternatives_1_0.eContents().get(9);
		private final Keyword cAlphaKKeyword_1_0_10 = (Keyword)cAlphaAlternatives_1_0.eContents().get(10);
		private final Keyword cAlphaLKeyword_1_0_11 = (Keyword)cAlphaAlternatives_1_0.eContents().get(11);
		private final Keyword cAlphaMKeyword_1_0_12 = (Keyword)cAlphaAlternatives_1_0.eContents().get(12);
		private final Keyword cAlphaNKeyword_1_0_13 = (Keyword)cAlphaAlternatives_1_0.eContents().get(13);
		private final Keyword cAlphaOKeyword_1_0_14 = (Keyword)cAlphaAlternatives_1_0.eContents().get(14);
		private final Keyword cAlphaPKeyword_1_0_15 = (Keyword)cAlphaAlternatives_1_0.eContents().get(15);
		private final Keyword cAlphaQKeyword_1_0_16 = (Keyword)cAlphaAlternatives_1_0.eContents().get(16);
		private final Keyword cAlphaRKeyword_1_0_17 = (Keyword)cAlphaAlternatives_1_0.eContents().get(17);
		private final Keyword cAlphaSKeyword_1_0_18 = (Keyword)cAlphaAlternatives_1_0.eContents().get(18);
		private final Keyword cAlphaTKeyword_1_0_19 = (Keyword)cAlphaAlternatives_1_0.eContents().get(19);
		private final Keyword cAlphaVKeyword_1_0_20 = (Keyword)cAlphaAlternatives_1_0.eContents().get(20);
		private final Keyword cAlphaWKeyword_1_0_21 = (Keyword)cAlphaAlternatives_1_0.eContents().get(21);
		private final Keyword cAlphaXKeyword_1_0_22 = (Keyword)cAlphaAlternatives_1_0.eContents().get(22);
		private final Keyword cAlphaYKeyword_1_0_23 = (Keyword)cAlphaAlternatives_1_0.eContents().get(23);
		private final Keyword cAlphaZKeyword_1_0_24 = (Keyword)cAlphaAlternatives_1_0.eContents().get(24);
		
		//Simple:
		//    {Simple}alpha= ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//    'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Simple}alpha= ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		public Group getGroup() { return cGroup; }
		
		//{Simple}
		public Action getSimpleAction_0() { return cSimpleAction_0; }
		
		//alpha= ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//    'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		public Assignment getAlphaAssignment_1() { return cAlphaAssignment_1; }
		
		//('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//   'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		public Alternatives getAlphaAlternatives_1_0() { return cAlphaAlternatives_1_0; }
		
		//'a'
		public Keyword getAlphaAKeyword_1_0_0() { return cAlphaAKeyword_1_0_0; }
		
		//'b'
		public Keyword getAlphaBKeyword_1_0_1() { return cAlphaBKeyword_1_0_1; }
		
		//'c'
		public Keyword getAlphaCKeyword_1_0_2() { return cAlphaCKeyword_1_0_2; }
		
		//'d'
		public Keyword getAlphaDKeyword_1_0_3() { return cAlphaDKeyword_1_0_3; }
		
		//'e'
		public Keyword getAlphaEKeyword_1_0_4() { return cAlphaEKeyword_1_0_4; }
		
		//'f'
		public Keyword getAlphaFKeyword_1_0_5() { return cAlphaFKeyword_1_0_5; }
		
		//'g'
		public Keyword getAlphaGKeyword_1_0_6() { return cAlphaGKeyword_1_0_6; }
		
		//'h'
		public Keyword getAlphaHKeyword_1_0_7() { return cAlphaHKeyword_1_0_7; }
		
		//'i'
		public Keyword getAlphaIKeyword_1_0_8() { return cAlphaIKeyword_1_0_8; }
		
		//'j'
		public Keyword getAlphaJKeyword_1_0_9() { return cAlphaJKeyword_1_0_9; }
		
		//'k'
		public Keyword getAlphaKKeyword_1_0_10() { return cAlphaKKeyword_1_0_10; }
		
		//'l'
		public Keyword getAlphaLKeyword_1_0_11() { return cAlphaLKeyword_1_0_11; }
		
		//'m'
		public Keyword getAlphaMKeyword_1_0_12() { return cAlphaMKeyword_1_0_12; }
		
		//'n'
		public Keyword getAlphaNKeyword_1_0_13() { return cAlphaNKeyword_1_0_13; }
		
		//'o'
		public Keyword getAlphaOKeyword_1_0_14() { return cAlphaOKeyword_1_0_14; }
		
		//'p'
		public Keyword getAlphaPKeyword_1_0_15() { return cAlphaPKeyword_1_0_15; }
		
		//'q'
		public Keyword getAlphaQKeyword_1_0_16() { return cAlphaQKeyword_1_0_16; }
		
		//'r'
		public Keyword getAlphaRKeyword_1_0_17() { return cAlphaRKeyword_1_0_17; }
		
		//'s'
		public Keyword getAlphaSKeyword_1_0_18() { return cAlphaSKeyword_1_0_18; }
		
		//'t'
		public Keyword getAlphaTKeyword_1_0_19() { return cAlphaTKeyword_1_0_19; }
		
		//'v'
		public Keyword getAlphaVKeyword_1_0_20() { return cAlphaVKeyword_1_0_20; }
		
		//'w'
		public Keyword getAlphaWKeyword_1_0_21() { return cAlphaWKeyword_1_0_21; }
		
		//'x'
		public Keyword getAlphaXKeyword_1_0_22() { return cAlphaXKeyword_1_0_22; }
		
		//'y'
		public Keyword getAlphaYKeyword_1_0_23() { return cAlphaYKeyword_1_0_23; }
		
		//'z'
		public Keyword getAlphaZKeyword_1_0_24() { return cAlphaZKeyword_1_0_24; }
	}
	public class NonTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NonTerminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNonTerminalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cVarAlternatives_1_0 = (Alternatives)cVarAssignment_1.eContents().get(0);
		private final Keyword cVarAKeyword_1_0_0 = (Keyword)cVarAlternatives_1_0.eContents().get(0);
		private final Keyword cVarBKeyword_1_0_1 = (Keyword)cVarAlternatives_1_0.eContents().get(1);
		private final Keyword cVarCKeyword_1_0_2 = (Keyword)cVarAlternatives_1_0.eContents().get(2);
		private final Keyword cVarDKeyword_1_0_3 = (Keyword)cVarAlternatives_1_0.eContents().get(3);
		private final Keyword cVarEKeyword_1_0_4 = (Keyword)cVarAlternatives_1_0.eContents().get(4);
		private final Keyword cVarFKeyword_1_0_5 = (Keyword)cVarAlternatives_1_0.eContents().get(5);
		private final Keyword cVarGKeyword_1_0_6 = (Keyword)cVarAlternatives_1_0.eContents().get(6);
		private final Keyword cVarHKeyword_1_0_7 = (Keyword)cVarAlternatives_1_0.eContents().get(7);
		private final Keyword cVarIKeyword_1_0_8 = (Keyword)cVarAlternatives_1_0.eContents().get(8);
		private final Keyword cVarJKeyword_1_0_9 = (Keyword)cVarAlternatives_1_0.eContents().get(9);
		private final Keyword cVarKKeyword_1_0_10 = (Keyword)cVarAlternatives_1_0.eContents().get(10);
		private final Keyword cVarLKeyword_1_0_11 = (Keyword)cVarAlternatives_1_0.eContents().get(11);
		private final Keyword cVarMKeyword_1_0_12 = (Keyword)cVarAlternatives_1_0.eContents().get(12);
		private final Keyword cVarNKeyword_1_0_13 = (Keyword)cVarAlternatives_1_0.eContents().get(13);
		private final Keyword cVarOKeyword_1_0_14 = (Keyword)cVarAlternatives_1_0.eContents().get(14);
		private final Keyword cVarPKeyword_1_0_15 = (Keyword)cVarAlternatives_1_0.eContents().get(15);
		private final Keyword cVarQKeyword_1_0_16 = (Keyword)cVarAlternatives_1_0.eContents().get(16);
		private final Keyword cVarRKeyword_1_0_17 = (Keyword)cVarAlternatives_1_0.eContents().get(17);
		private final Keyword cVarTKeyword_1_0_18 = (Keyword)cVarAlternatives_1_0.eContents().get(18);
		private final Keyword cVarUKeyword_1_0_19 = (Keyword)cVarAlternatives_1_0.eContents().get(19);
		private final Keyword cVarVKeyword_1_0_20 = (Keyword)cVarAlternatives_1_0.eContents().get(20);
		private final Keyword cVarWKeyword_1_0_21 = (Keyword)cVarAlternatives_1_0.eContents().get(21);
		private final Keyword cVarXKeyword_1_0_22 = (Keyword)cVarAlternatives_1_0.eContents().get(22);
		private final Keyword cVarYKeyword_1_0_23 = (Keyword)cVarAlternatives_1_0.eContents().get(23);
		private final Keyword cVarZKeyword_1_0_24 = (Keyword)cVarAlternatives_1_0.eContents().get(24);
		
		//NonTerminal:
		//    {NonTerminal}var=('A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NonTerminal}var=('A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z')
		public Group getGroup() { return cGroup; }
		
		//{NonTerminal}
		public Action getNonTerminalAction_0() { return cNonTerminalAction_0; }
		
		//var=('A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z')
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//('A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z')
		public Alternatives getVarAlternatives_1_0() { return cVarAlternatives_1_0; }
		
		//'A'
		public Keyword getVarAKeyword_1_0_0() { return cVarAKeyword_1_0_0; }
		
		//'B'
		public Keyword getVarBKeyword_1_0_1() { return cVarBKeyword_1_0_1; }
		
		//'C'
		public Keyword getVarCKeyword_1_0_2() { return cVarCKeyword_1_0_2; }
		
		//'D'
		public Keyword getVarDKeyword_1_0_3() { return cVarDKeyword_1_0_3; }
		
		//'E'
		public Keyword getVarEKeyword_1_0_4() { return cVarEKeyword_1_0_4; }
		
		//'F'
		public Keyword getVarFKeyword_1_0_5() { return cVarFKeyword_1_0_5; }
		
		//'G'
		public Keyword getVarGKeyword_1_0_6() { return cVarGKeyword_1_0_6; }
		
		//'H'
		public Keyword getVarHKeyword_1_0_7() { return cVarHKeyword_1_0_7; }
		
		//'I'
		public Keyword getVarIKeyword_1_0_8() { return cVarIKeyword_1_0_8; }
		
		//'J'
		public Keyword getVarJKeyword_1_0_9() { return cVarJKeyword_1_0_9; }
		
		//'K'
		public Keyword getVarKKeyword_1_0_10() { return cVarKKeyword_1_0_10; }
		
		//'L'
		public Keyword getVarLKeyword_1_0_11() { return cVarLKeyword_1_0_11; }
		
		//'M'
		public Keyword getVarMKeyword_1_0_12() { return cVarMKeyword_1_0_12; }
		
		//'N'
		public Keyword getVarNKeyword_1_0_13() { return cVarNKeyword_1_0_13; }
		
		//'O'
		public Keyword getVarOKeyword_1_0_14() { return cVarOKeyword_1_0_14; }
		
		//'P'
		public Keyword getVarPKeyword_1_0_15() { return cVarPKeyword_1_0_15; }
		
		//'Q'
		public Keyword getVarQKeyword_1_0_16() { return cVarQKeyword_1_0_16; }
		
		//'R'
		public Keyword getVarRKeyword_1_0_17() { return cVarRKeyword_1_0_17; }
		
		//'T'
		public Keyword getVarTKeyword_1_0_18() { return cVarTKeyword_1_0_18; }
		
		//'U'
		public Keyword getVarUKeyword_1_0_19() { return cVarUKeyword_1_0_19; }
		
		//'V'
		public Keyword getVarVKeyword_1_0_20() { return cVarVKeyword_1_0_20; }
		
		//'W'
		public Keyword getVarWKeyword_1_0_21() { return cVarWKeyword_1_0_21; }
		
		//'X'
		public Keyword getVarXKeyword_1_0_22() { return cVarXKeyword_1_0_22; }
		
		//'Y'
		public Keyword getVarYKeyword_1_0_23() { return cVarYKeyword_1_0_23; }
		
		//'Z'
		public Keyword getVarZKeyword_1_0_24() { return cVarZKeyword_1_0_24; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFirstAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFirstNonTerminalParserRuleCall_1_0_0 = (RuleCall)cFirstAssignment_1_0.eContents().get(0);
		private final Assignment cSecondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSecondNonTerminalParserRuleCall_1_1_0 = (RuleCall)cSecondAssignment_1_1.eContents().get(0);
		
		////Rigth: Sample;
		////
		////Sample returns  Rigth:
		////{Simple} alpha= 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'
		////{Binary} first=NonTerminal second=NonTerminal
		////;
		//Binary:
		//    {Binary}(first=NonTerminal second=NonTerminal)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Binary}(first=NonTerminal second=NonTerminal)
		public Group getGroup() { return cGroup; }
		
		//{Binary}
		public Action getBinaryAction_0() { return cBinaryAction_0; }
		
		//(first=NonTerminal second=NonTerminal)
		public Group getGroup_1() { return cGroup_1; }
		
		//first=NonTerminal
		public Assignment getFirstAssignment_1_0() { return cFirstAssignment_1_0; }
		
		//NonTerminal
		public RuleCall getFirstNonTerminalParserRuleCall_1_0_0() { return cFirstNonTerminalParserRuleCall_1_0_0; }
		
		//second=NonTerminal
		public Assignment getSecondAssignment_1_1() { return cSecondAssignment_1_1; }
		
		//NonTerminal
		public RuleCall getSecondNonTerminalParserRuleCall_1_1_0() { return cSecondNonTerminalParserRuleCall_1_1_0; }
	}
	
	
	private final GNFCElements pGNFC;
	private final InitialElements pInitial;
	private final ProductionElements pProduction;
	private final RigthElements pRigth;
	private final SimpleElements pSimple;
	private final NonTerminalElements pNonTerminal;
	private final BinaryElements pBinary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGNFC = new GNFCElements();
		this.pInitial = new InitialElements();
		this.pProduction = new ProductionElements();
		this.pRigth = new RigthElements();
		this.pSimple = new SimpleElements();
		this.pNonTerminal = new NonTerminalElements();
		this.pBinary = new BinaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GNFC:
	//    w+=(Simple)(w+=Simple)* //W is the string which will be analyzed by CYK
	//    init=Initial productions+=Production*
	//;
	public GNFCElements getGNFCAccess() {
		return pGNFC;
	}
	
	public ParserRule getGNFCRule() {
		return getGNFCAccess().getRule();
	}
	
	//Initial:
	//    left='S' '->' rigth+=(Rigth)('|' + rigth+=Rigth)*
	//;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	////Lambda:
	////    {Rigth} rigth= '_' | Rigth
	////;
	//Production:
	//    left=NonTerminal '->' rigth+=(Rigth)('|' + rigth+=Rigth)*
	//;
	public ProductionElements getProductionAccess() {
		return pProduction;
	}
	
	public ParserRule getProductionRule() {
		return getProductionAccess().getRule();
	}
	
	//Rigth:
	//    simple=Simple | binary=Binary
	//;
	public RigthElements getRigthAccess() {
		return pRigth;
	}
	
	public ParserRule getRigthRule() {
		return getRigthAccess().getRule();
	}
	
	//Simple:
	//    {Simple}alpha= ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
	//    'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
	//;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}
	
	//NonTerminal:
	//    {NonTerminal}var=('A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
	//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z')
	//;
	public NonTerminalElements getNonTerminalAccess() {
		return pNonTerminal;
	}
	
	public ParserRule getNonTerminalRule() {
		return getNonTerminalAccess().getRule();
	}
	
	////Rigth: Sample;
	////
	////Sample returns  Rigth:
	////{Simple} alpha= 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'
	////{Binary} first=NonTerminal second=NonTerminal
	////;
	//Binary:
	//    {Binary}(first=NonTerminal second=NonTerminal)
	//;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
